\documentclass[english]{article}
\newcommand{\proglang}{\emph}
\newcommand{\pkg}{\emph}
\newcommand{\code}{\emph}
\begin{document}
%\VignetteIndexEntry{EvalEst Guide}
\SweaveOpts{eval=TRUE,echo=TRUE,results=hide,fig=FALSE,keep.source=TRUE}
\begin{Scode}{echo=FALSE,results=hide}
 options(continue="  ")
\end{Scode}

\begin{Scode}{echo=FALSE,results=hide}
 options(continue="  ")
\end{Scode}

\section*{EvalEst Guide}
 
In \proglang{R}, the functions in this package are made available with

\begin{Scode}
library("EvalEst")
\end{Scode}

The code from the vignette that generates this guide can 
be loaded into an editor with \code{edit(vignette("EvalEst"))}.
This uses the default editor, which can be changed using \code{options()}.
Also, it should be possible to view the pdf version of the guide for this 
package with \code{print(vignette("EvalEst"))} and the guide for the dse
package with \code{print(vignette("dse-guide"))}.

\section{Evaluating Estimation Methods}

One way to test estimation techniques is to specify a ''true'' model
which is used to produce simulated data and then examine how well
an estimation technique finds the true model. This is not as general
as theoretical results, since it is really only valid at the "true"
parameter values and for the sample size tested, however, it can be
illustrative and theoretical results for small samples are very difficult
to obtain. It also provides a very good cross check of the simulation
and estimation code. Also, equivalent representations may have effects
which are not yet fully appreciated in the literature.
The following models from Gilbert (1995)
\footnote{P.D. Gilbert, 1993. 
''State Space and ARMA Models: An Overview of the Equivalence'', 
Bank of Canada working paper 93--4.
Also available at www.bank-banque-canada.ca/pgilbert}
will be used to illustrate.

\begin{Scode}
mod1 <- ARMA(A=array(c(1,-.25,-.05), c(3,1,1)), 
             B=array(1,c(1,1,1)))

mod2 <- ARMA(A=array(c(1,-.8, -.2 ), c(3,1,1)), 
             B=array(1,c(1,1,1)))

mod3 <- ARMA(
 A=array(c( 
  1.00,-0.06,0.15,-0.03,0.00,0.02,0.03,-0.02,0.00,-0.02,-0.03,
  -0.02,0.00,-0.07,-0.05,0.12,1.00,0.20,-0.03,-0.11,0.00,-0.07,
  -0.03,0.08,0.00,-0.40,-0.05,-0.66,0.00,0.00,0.17,-0.18,1.00,
  -0.11,-0.24,-0.09), c(4,3,3)), 
 B=array(diag(1,3), c(1,3,3)))
\end{Scode}
\code{mod2} has a unit root, as can be verified with 
\code{roots(mod2)} or \code{stability(mod2)}.

The function \code{MonteCarloSimulations} runs simulate repeatedly to give
many data samples.

\begin{Scode}
z <-  MonteCarloSimulations(mod1, 
                            simulation.args=list(sampleT=100))

tfplot(z)

distribution(z)
\end{Scode}

Usually it is not necessary to use \code{MonteCarloSimulations} and actually
save all the simulations since the seed and other information about
the random number generator (RNG) can be used to reproduce the samples.
Thus functions for testing estimation methods can produce the same
samples when they are needed.

The function \code{EstEval} simulates and then estimates models:

\begin{Scode}
e.ls.mod1 <- EstEval( mod1, replications=100,
  simulation.args=list(sampleT=100, sd=1),
  estimation="estVARXls",
  estimation.args=list(max.lag=2),
  criterion="TSmodel"
#  rng=list(kind="default", normal.kind="default", 
#  seed=c(13,44,1,25,56,0,6,33,22,13,13,0))# Splus - see below
 
  ) 
\end{Scode}

In this example simulation and estimation will be repeated 100 times
with samples of size 100 and the standard deviation of the model noise
will be set to 1. \code{simulation.args} are passed to the function
\code{simulate}, which may take different arguments depending on the class
of the model. Estimation is done with the function \code{estVARXls}
and \code{estimation.args} are passed to it. The argument criterion
specifies what should be returned from the estimation. In this case
the model is returned (An object of class \code{TSmodel}) but not additional
information as is usually returned in the object \code{TSestModel}. It is
also possible to specify \code{coef} or \code{roots} to return only that specific
information, but that information can be extracted from the \code{TSmodel}
as illustrated below. In general \code{EstEval} will work with any estimation
method which will take the results of simulate applied to the supplied
model and returns something that criterion can extract. That is, if
\code{criterion(estimation(simulate(model)))} returns something (with \code{criterion}
and \code{estimation} replaced by the functions you supply and model replaced
by the model you supply), then \code{EstEval} should work with your functions.
This does not mean that plots described below will necessarily work
or make sense.

An optional argument \code{rng} can be specified.
If supplied, the RNG and seed will be set. This is useful if an experiment
is to be reproduced. Using Splus 3.2 and 3.3 the settings indicated by comments
in the examples
in this section will reproduce the results in Gilbert (1995). 
It was possible to generate similar random experiments in \proglang{S} 
and in \proglang{R}, but
not using the \proglang{Splus} default generator. 
(I have not tested in \proglang{Splus} for
several years now.) If the argument \code{rng} is given as

\begin{Scode}
rng=list(kind="Wichmann-Hill", seed=c(979,1479,1542),
 normal.kind="Box-Muller")
\end{Scode}
then the uniform RNG is set to Wichmann-Hill, the normal transformation
is set to Box-Muller, and the initial seed is set. With the RNG set
in this way both \proglang{Splus} and \proglang{R} will produce similar results. These settings
are reset to their previous values when the function completes. They
can be set so that they do not revert using the function

\begin{Scode}
setRNG(kind="Wichmann-Hill", seed=c(979,1479,1542),
 normal.kind="Box-Muller")
\end{Scode}
The argument seed is optional (and other values can be supplied but
they should be consistent with the generator). An initial seed will
be generated if it is omitted. Typically the seed should be set only when 
trying to reproduce previous results.

The following uses mod2 as the true model.

\begin{Scode}
e.ls.mod2 <- EstEval( mod2, replications=100, 
                  simulation.args=list(sampleT=100, sd=1), 
                  estimation="estVARXls", 
		  estimation.args=list(max.lag=2), 
                  criterion="TSmodel"
                  #rng=list(kind="default", normal.kind="default",
                  #seed=c(13,43,7,57,62,3,30,29,24,54,47,2))#Splus
 )
\end{Scode}

To plot a line chart of the cumulative average of the estimated parameters
use \code{coef} to extract the parameters (coefficients) 
from the \code{TSmodel}:

\begin{Scode}
par(mfcol=c(2,1)) # set the number of plots on the graphics device

tfplot(coef(e.ls.mod1)) 
\end{Scode}

The plot from \code{mod2} looks like this:

\begin{Scode}{fig=TRUE,width=8,height=8}
tfplot(coef(e.ls.mod2)) 
\end{Scode}

The straight line indicates the true value. To plot a line chart
of the estimated parameters use \code{coef} to extract the parameters from
the \code{TSmodel}:

\begin{Scode}
par(mfcol = c(2,1)) #set number of plots on graphics device
tfplot(coef(e.ls.mod1), cumulate = FALSE, bounds = FALSE)
\end{Scode}
\code{bounds} controls whether or not estimated one standard deviation bounds
are plotted. The plot from \code{mod2} looks like this:

\begin{Scode}{fig=TRUE,width=8,height=8}
tfplot(coef(e.ls.mod2), cumulate = FALSE, bounds = FALSE) 
\end{Scode}

To plot the distribution of estimates:

\begin{Scode}
distribution(coef(e.ls.mod1), bandwidth=.2) 
\end{Scode}

The plot from \code{mod2} looks like this:

\begin{Scode}{fig=TRUE,width=8,height=8}
distribution(coef(e.ls.mod2), bandwidth=.2) 
\end{Scode}

To plot the roots of the estimated model use \code{roots} to extract the
roots from the \code{TSmodel}:

\begin{Scode}
e.ls.mod1.roots <- roots(e.ls.mod1)
plot(e.ls.mod1.roots) 
plot(e.ls.mod1.roots, complex.plane=F) 
plot(roots(e.ls.mod2), complex.plane=F) 
distribution(e.ls.mod1.roots, bandwidth=.2) 
\end{Scode}
\code{bandwidth} is an argument passed to the kernel estimator used to generate
the plot. The plot from \code{mod2} looks like this:

\begin{Scode}{fig=TRUE,width=8,height=8}
distribution(roots(e.ls.mod2), bandwidth=.1) 
\end{Scode}

Some attention to the equivalence of different model representations
is necessary when evaluating estimation methods. For example, if the
state space equivalent of a VAR model is used as the true model for
simulation and \code{estVARXls} is used for estimation then parameter estimates
will be very different from those of the state space model (but root
estimates should still be similar). Many estimation techniques may
also do some model selection (such as \code{estBlackBox} does), so the
returned models may have different numbers of parameters and/or lags.

Evaluating models based on their forecast performance avoids some
of these difficulties. In any case, since forecasting is often the
end objective, it is useful to evaluate models directly on their forecasting
performance. The function \code{forecastCovEstimatorsWRTtrue()} evaluates
estimation methods using a given true model for simulation. It calculates
the covariance of forecast errors of the estimated models relative
to the output of the true model:

\begin{Scode}
pc <- forecastCovEstimatorsWRTtrue(mod3,
        estimation.methods = list(estVARXls=list(max.lag=6)),
        est.replications=2, pred.replications=10
       # rng=list(kind="default", normal.kind="default", 
       # seed=c( 53,41,26,39,10,1,19,25,56,32,28,3))#Splus
) 
\end{Scode}

The names of the elements in the list \code{estimation.methods} 
specify
the estimation methods and their value is a list of the arguments
to the method. If no arguments are required then the value should
be specified as \code{NULL}. 
The covariance for forecasts of zero and a simple trend are also
calculated. These are useful benchmarks. \code{est.replications}
controls the number of times a sample is generated and used for estimating
a model with each estimation method. \code{pred.replications} controls
how many times the forecasts from the estimated model are compared
with output from the true model. Thus the total number of simulations
is \code{est.replications} + \code{est.replications} {*} 
\code{pred.replications}, so 22 in the above example.

A similar function is available which applies a model reduction procedure
after the estimation:

\begin{Scode}
pc.rd <- forecastCovReductionsWRTtrue(mod3,
              estimation.methods = list(estVARXls=list(max.lag=3)),
              est.replications=2, pred.replications=10
              # rng = list(kind = "default", normal.kind="default", 
              # seed=c(29,55,47,18,33,1,15,15,34,46,13,2)) 
)
\end{Scode}

The reduction procedure used is \code{MittnikReducedModels}. An optional
argument \code{criteria} can be specified. This controls the model selection
criteria used by the reduction technique.

It is possible to compare different estimation techniques on the
basis of their out-of-sample forecasting error with respect to a data
sample. In the following example \code{estimation.sample} controls the portion
of the sample used for estimation. It can be a fraction indicating
a portion of the sample, or it can be an integer in which case it
will be treated as the number of periods to use for estimation.

\begin{Scode}
data(eg1.DSE.data, package="dse")
z <-outOfSample.forecastCovEstimatorsWRTdata(trimNA(eg1.DSE.data),
estimation.sample=.5,
estimation.methods = list(estVARXar=NULL, estVARXls=NULL), 
trend=T)
\end{Scode}

The plot looks like this:

\begin{Scode}{fig=TRUE,width=8,height=12}
tfplot(z)
\end{Scode}

In the example below the number of lags is limited (the default is
12 for \code{estBlackBox4}) and printing of intermediate results
is suppressed.

\begin{Scode}
z <-outOfSample.forecastCovEstimatorsWRTdata( trimNA(eg1.DSE.data),
                     estimation.sample=.5,
                     estimation.methods = list(
                     estBlackBox4=list(max.lag=3, verbose=F),
                     estVARXls=list(max.lag=3)), 
                     trend=T, zero=T)
tfplot(z)
\end{Scode}

The object returned by \code{outOfSample.forecastCovEstimatorsWRTdata()}
contains the estimated models so it is possible to extract the models
and use \code{l}, \code{horizonForecasts} and \code{featherForecasts}. 
In the above example
the model estimated with \code{estBlackBox4} is the first model and that
estimated with \code{estVARXls} is the second, so

\begin{Scode}
zz <- horizonForecasts(TSmodel(z, select=1), TSdata(z), 
                       horizons=c(1,3,6))
\end{Scode}
would generate an object with the actual forecasts for the model
estimated with \code{estBlackBox4} (rather than the covariance of the forecast
errors) and \code{forecasts(zz)[3,30,]} will then be the prediction made
for the 30th period from 6 (the third element of \code{horizons)} periods
previous. The generic function\code{ horizonForecasts()} can also be applied
directly to \code{z} and the appropriate information will be extracted to
generate forecasts for all the estimated models.
\end{document}
